- name: Stop and remove Tank
  docker_container:
    name: tank
    state: absent

- name: Create docker container tank
  docker_container:
    name: tank 
    image: ap3rture/tank:latest
    # restart: yes
    restart_policy: always
    pull: yes
    ports:
    - "8888:8888"
    volumes:
    - /var/log/tank:/app/logs
    tmpfs:
    - /app/tmp
    env:
      JAVA_OPTS: "-Xms2g -Xmx2g"
      TANK_PREFIX: "/tank"
      TANK_DB_HOSTS: "{%- for host in groups['cassandra_nodes'] -%}
      {{ hostvars[host]['ansible_default_ipv4']['address'] }}{% if not loop.last %},{% endif %}
      {%- endfor -%}"
      TANK_DB_STRATEGY: NetworkTopologyStrategy
      TANK_DB_REPL: "2"
      TANK_DB_INDEX: "us_idx"
      TANK_MAIN_ATTR: ""
      TANK_MAIN_ATTR_DEFAULT: ""
      TANK_ADD_TIMESTAMP: "true"
      TANK_PARTITION_KEYS: "hash"
      TANK_PRIMARY_KEYS: "uid, timestamp"
      TANK_ATTR_FIELDS: "uid uuid, timestamp timestamp, postcode text, city text, road text, area double, county text, id int, lat double, lon double"
      TANK_TILE_ATTRIBUTES: "postcode, city, area, road, lon, lat, county, uid"
      TANK_DB_TABLE: "buildings"
      TANK_EXHAUSTER_ENABLED: "true"
      TANK_EXHAUSTER_HOST: "{{ hostvars[groups['proxy_nodes'][0]]['ansible_default_ipv4']['address'] }}"
      TANK_EXHAUSTER_PORT: "8082"


- name: Wait for tank running
  retries: 3
  wait_for:
    port: 8888
    delay: 5
    
- name: Check if tank endpoint is available
  retries: 20
  delay: 5
  register: result
  until: result.status == 200
  uri:
    url: http://127.0.0.1:8888/tank/
    method: GET
    status_code: 200